// 15-07-2020 - Day 1
Efficiency- Complexity
            How well you are using your compute's resources to get a particular job done.

Time and Space Complexity
    -How long your code takes to run 
    -How much storage space you need

Big(O): O(n) - > n represents the length of an input to your function
Ex: 
function decode(input):
    create outputString;
    for each letter in input:
        get new_letter from letter's location in cipher
        add new_letter to outputString
    return outputString

Time Efficiency - Count number of lines
    creating outputString(1) and returning outputString will happen once only(1) - 1+1 = 2 -> O( 2)
    '''get new_letter from letter's location in cipher
    add new_letter to outputString''' ->
    Both(2) lines will run for every character -> 2 * n(number of character)
    getting a letter will add another line -> 3 * n(number of character)
    26 check for checking the cipher -> 26 +3 => 29



So, O(29n +2), for 10 letters multiplied by amount of time my computer takes to run a line of code-> 
29*10+2=292

For 1 million characters -> 
    ~29million


Efficiency Practice:
def example1(manatees):
    for manatee in manatees:
        print manatee['name']
Ans-n /Correct

def example2(manatees):
    print manatees[0]['name']
    print manatees[0]['age']
Ans - 1/Correct

def example3(manatees):
    for manatee in manatees:
        for manatee_property in manatee:
            print manatee_property, ": ", manatee[manatee_property]

Ans - nm/Correct

def example4(manatees):
    oldest_manatee = "No manatees here!"
    for manatee1 in manatees:
        for manatee2 in manatees:
            if manatee1['age'] < manatee2['age']:
                oldest_manatee = manatee2['name']
            else:
                oldest_manatee = manatee1['name']
    print oldest_manatee
Ans- n^2+2/ Not Correct 

Correct Ans -> O(n^2)

